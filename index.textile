---
layout: default
title: Penub PHP Framework
---

h1. What is Penub?

Penub (PHP Nuts and Bolts) is a lean, robust PHP microkernel intended for building slik web applications with least distraction.

h2. What is it not?

Penub is not a CMS. Nor will it ever be, if you want a PHP CMS, download Drupal
Penub is not a “full-stack framework” with ORM for SQL databases. We actually enjoy writing code against document databases and never believed in ORMs to begin with.
Penub is not a port of RubyOnRails, Django, Struts, Tapestry, [insert some other here] framework to PHP

h2. Credits

Modular architecture of Penub is greatly inspired by architectural modularity of Drupal. A lot of cool ideas were shamelessly borrowed from Rails, as well.

h2. Design Principles

* Modular design – any code is part of some module, including core code. There’s no code outside module code (except module management code of the framework, obviously)
* Separate framework, contrib and custom code trees.
** Framework – microkernel code
** Contrib – any third-party modules that you use, but don’t have control of (don’t hack contrib!)
** Custom – project code (whether you are building a website or a web app)
Only one file: index.php is publicly available from web. Everything else is protected by web server [Apache or Nginx] access rules and can even be moved out of web folder.
* Single, short configuration file. Wiring-up happens in code. We don’t like XML.
* Support for hook-able overrides
* Flexible URL Routing API. Explicit code-based definitions for routes.

{% highlight php %}

class SQLInTest extends PHPUnit_Framework_TestCase {

    function test_instring() {    
        $arr = array (1,2,3,4,5);
        $expected = "IN (1,2,3,4,5)";
        $this->assertEquals($expected,sql_instring($arr));        
        
        $arr = array (1);
        $expected = "IN (1)";
        $this->assertEquals($expected,sql_instring($arr));        

        $arr = array ();
        $expected = "IS NULL";
        $this->assertEquals($expected,sql_instring($arr));        

        $arr = array ('a', 'b', 'c');
        $expected = "IN ('a','b','c')";
        $this->assertEquals($expected,sql_instring($arr));        

    }

}

{% endhighlight %}

