---
layout: default
title: Penub PHP Framework
---

h1. What is Penub?

Penub (PHP Nuts and Bolts) is a lean, robust PHP microkernel intended for building slik web applications with least distraction.

h2. What is it not?

Penub is not a CMS. Nor will it ever be, if you want a PHP CMS, download Drupal
Penub is not a “full-stack framework” with ORM for SQL databases. We actually enjoy writing code against document databases and never believed in ORMs to begin with.
Penub is not a port of RubyOnRails, Django, Struts, Tapestry, [insert some other here] framework to PHP

h2. Credits

Modular architecture of Penub is greatly inspired by architectural modularity of Drupal. A lot of cool ideas were shamelessly borrowed from Rails, as well.

h2. Design Principles

* Modular design – any code is part of some module, including core code. There’s no code outside module code (except module management code of the framework, obviously)
* Separate framework, contrib and custom code trees.
** Framework – microkernel code
** Contrib – any third-party modules that you use, but don’t have control of (don’t hack contrib!)
** Custom – project code (whether you are building a website or a web app)
Only one file: index.php is publicly available from web. Everything else is protected by web server [Apache or Nginx] access rules and can even be moved out of web folder.
* Single, short configuration file. Wiring-up happens in code. We don’t like XML.
* Support for hook-able overrides
* Flexible URL Routing API. Explicit code-based definitions for routes.

h2. Penub Modules and the Dispatch Architecture

The core architectural concept that Penub adheres to is that everything is a module. There’s a lean microkernel, everything else (including Penub framework itself) is a set of pluggable modules. When Penub (or an application built on top of Penub) needs to execute some action, it issues a dispatch request for the action. Any module can hook into the dispatch and either react by some actions or alter the values of the $context array passed through the dispatch. Such loose and abstract implementation of the Chain of Responsibility pattern allows us to keep things extremely pluggable and modular.

The smallest module, in penub, consists of a .module configuration file and the main module class file. An example of a .module file may look like:

{% highlight php %}
<?php

/**
* @File Default implementation of the URL Router.
*/

/**
* Module configuration.
*/
function router_config() {
  return array (
    'info' => array (
      'title' => 'Default Routing Library',
      'description' => 'Default implementation of URL routing',
      'version' => '1.0',      
      'weight' => '0', //-- 0 is default
      'dependencies' => array(),
    ),
    'implementation' => array (
      'class' => 'PenubURLRouter',
      //-- location is relative to penub/modules, pcontrib/modules or custom/modules
      //-- if omitted it is assumed that the location of the class file is the same as of the module file
      //--'filepath' => 'router/PenubURLRouter.class.inc', 
    )
  );

}

{% endhighlight %}

